# Openresty configuration file
# @see https://github.com/auto-ssl/lua-resty-auto-ssl
# @see https://github.com/openresty/lua-resty-core/blob/master/lib/ngx/pipe.md

# Spawn and bind a worker to each of the available CPU cores
worker_processes auto;
worker_cpu_affinity auto;

# Workers should spawn as www-data instead of nobody
user www-data;

# ALLOWED_DOMAINS environment variable holds a comma-separated list of domains for which this relay should be allowed to work
env ALLOWED_DOMAINS;

# RELAY_ADDRESS environment variable holds a comma-separated list of IP addresses of this relay
env RELAY_ADDRESS;

events {
  worker_connections 1024;
}

http {
  # Static assets cache
  proxy_cache_path /tmp/ levels=1:2 keys_zone=static_cache:10m;

  # Include MIME types, so Content-Type header can be automatically set
  include /etc/openresty/mime.types;

  # The "auto_ssl" shared dict should be defined with enough storage space to
  # hold your certificate data. 1MB of storage holds certificates for
  # approximately 100 separate domains.
  lua_shared_dict auto_ssl 1m;

  # The "auto_ssl_settings" shared dict is used to temporarily store various settings
  # like the secret used by the hook server on port 8999. Do not change or
  # omit it.
  lua_shared_dict auto_ssl_settings 64k;

  # The "connections" shared dict is used to store the association between nginx connection number + host,
  # and the session_id as maintained by the Node process.
  # @see openresty/lua/access_http_connection.lua
  lua_shared_dict connections 64k;

  lua_package_path "/etc/openresty/lua/?.lua;;";
  lua_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;

  # A DNS resolver must be defined for OCSP stapling to function.
  # We are using Cloudflare public DNS here.
  resolver 1.1.1.1 ipv6=off;

  # Initial setup tasks.
  init_by_lua_file /etc/openresty/lua/init_auto_ssl.lua;

  # Called when a new worker process is spawned by nginx.
  init_worker_by_lua_file /etc/openresty/lua/init_worker_auto_ssl.lua;

  # HTTP & HTTPS server
  server {
    listen 80;
    listen 443 ssl;

    access_by_lua_block {
      local domains_whitelist = require "domains_whitelist"
      if not domains_whitelist.is_domain_whitelisted(ngx.var.host) then
        ngx.status = 403
        ngx.say("Access Denied: Your domain is not on the allowed list.")
        ngx.exit(ngx.HTTP_FORBIDDEN)
      end
    }

    # Dynamic handler for issuing or returning certs for SNI domains.
    ssl_certificate_by_lua_block {
      auto_ssl:ssl_certificate()
    }

    # A static ssl_certificate file for nginx to start, and for auto_ssl to fall-back in case of errors.
    ssl_certificate /data/resty-auto-ssl-fallback.crt;
    ssl_certificate_key /data/resty-auto-ssl-fallback.key;

    # Default HTTP Headers
    add_header Strict-Transport-Security "max-age=63072000";
    add_header X-Frame-Options "deny";
    add_header Cache-Control "no-store, max-age=0";
    add_header Pragma "no-cache";
    add_header Cross-Origin-Opener-Policy "same-origin";

    # Endpoint used for performing domain verification with Let's Encrypt.
    location /.well-known/acme-challenge/ {
      content_by_lua_block {
        auto_ssl:challenge_server()
      }
    }

    # Redirect empty containers to /.../
    location / {
      return 301 /.../;
    }

    # Redirect /... (e.g., when manually entered by the user) to /.../
    # to make sure container management scripts can safely use relative paths
    location = /... {
      return 301 /.../;
    }

    include includes/www_root;
  }

  # Internal server running on port 8999 for handling certificate tasks.
  server {
    listen 127.0.0.1:8999;

    # Increase the body buffer size, to ensure the internal POSTs can always
    # parse the full POST contents into memory.
    client_body_buffer_size 128k;
    client_max_body_size 128k;

    location / {
      content_by_lua_block {
        auto_ssl:hook_server()
      }
    }
  }
}
